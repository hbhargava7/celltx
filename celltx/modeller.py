# Copyright 2020 Hersh K. Bhargava (https://hershbhargava.com)
# Laboratories of Hana El-Samad and Wendell A. Lim
# University of California, San Francisco

"""Elements for generating, configuring, and evaluating celltx models."""

from .model import Model


class Modeller:
    """
    Class which holds functions for creating a celltx, model, configuring the model, and postprocessing model
    simulations.

    Subclasses of this class must override the following `Modeller` methods:
        * `get_model` : generate a `celltx.model.Model` instance based on the options in `self.option`. Used to populate `self.model`.
        * `configure_model` : set up `self.model` with initial parameter and initial condition values.
        * `get_model_options` : return an array of dictionaries specifying names, descriptions, and options for the `kwargs` of `get_model`.

    Attributes
    ----------
    model : celltx.model.Model
        Singleton instance of a celltx model generated by calling ``get_model``

    readout_funcs : list[func]
        List of functions which take as input a model integration run (`model.integrate()`).

    model_options : dict
        Dict of key-value pairs representing input values for `get_model`.
    """

    def __init__(self):
        """
        Set everything up in the following order:
        1. Generate default model options from `self.get_model_options`, taking the first value in each.
        2. Generate model using default options using `self.get_model`.
        3. Configure the model with x0 and initial conditions using `self.get_model_options`.
        """
        self.model = None
        self.model_options = None

    def setup(self):
        try:
            self.model_options = {}
            for val in self.get_model_options():
                self.model_options[val['name']] = val['values'][0]

            self.model = self.get_model(**self.model_options)

            self.configure_model()

        except:
            raise NotImplementedError('Tried to instantiate a celltx modeller without overriding required methods.')

    def set_model_options(self, options):
        """
        Regenerate the model using a new set of options.
        """
        self.model_options = options
        self.model = self.get_model(**self.model_options)
        self.configure_model()

    def get_model_options(self):
        """
        Return a list of dicts, where each dict has the following key/value pairs:
            * 'name' : name of the argument to be passed to `get_model`
            * 'description' : description of what the argument is for
            * 'values' : list of acceptable values for the argument, with the default value listed first.
        """
        raise NotImplementedError

    def configure_model(self):
        """
        Set initial conditions and parameters of `self.model`.
        """
        pass

    @staticmethod
    def get_model(**kwargs):
        """
        Generate a `celltx.model.Model` instance.
        """
        raise NotImplementedError
